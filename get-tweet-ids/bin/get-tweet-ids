#!/usr/bin/env node

const args = require('args')
const OAuth = require('oauth').OAuth

// Your Twitter API keys and tokens
// See README.md for further instructions
const API_KEY = process.env.TWITTER_API_KEY
const API_SECRET = process.env.TWITTER_API_SECRET
const ACCESS_TOKEN = process.env.TWITTER_ACCESS_TOKEN
const ACCESS_TOKEN_SECRET = process.env.TWITTER_ACCESS_TOKEN_SECRET

// Set up OAuth
const oauth = new OAuth(
  'https://api.twitter.com/oauth/request_token',
  'https://api.twitter.com/oauth/access_token',
  API_KEY,
  API_SECRET,
  '1.0A',
  null,
  'HMAC-SHA1'
)

args
  .option('maxid', 'The value to pass to the max_id parameter in the request')
  .option('username', 'The Twitter user whose tweets the script will fetch')
  .option('count', 'The number of tweets to fetch. Maximum 200')
  .option('retweets', 'Include retweets')
  .option('output', 'The file to write to')
  .option('replies', 'Include replies')

const flags = args.parse(process.argv)

validateOptions()
getTweets()

function validateOptions () {
  if (!flags.username) {
    console.error('Username is required')
    process.exit()
  } else if (flags.count > 200) {
    console.error('Max count is 200. Fetching 200 tweets...')
  }
}

function constructRequestURL (username, count = 200, includeRetweets,
                              maxID, includeReplies) {
  const base = 'https://api.twitter.com/1.1/statuses/user_timeline.json?'
  const screenname = `screen_name=${username}`
  const retweets = `include_rts=${includeRetweets || false}`
  const replies = `exclude_replies=${!includeReplies}`

  let maxTweetID = ''
  if (maxID) {
    maxTweetID = `max_id=${maxID}`
  }

  return `${base}${screenname}&${retweets}&${replies}&${maxTweetID}`
}

function getTweets () {
  let ids = []

  const req = constructRequestURL(
    flags.username,
    flags.count,
    flags.retweets,
    flags.maxid,
    flags.replies)
}
